<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Webinar - Develop Cloud Native Microservices using Apache Camel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8iFvSDgqYqA/webinar-develop-cloud-native.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="webinar" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-webinar_develop_cloud_native_microservices_using_apache_camel</id><updated>2019-01-25T11:29:55Z</updated><published>2019-01-25T11:29:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;On next thursday 31st January 2019 I am presenting a &lt;a href="http://redhat.com/en/events/webinar/develop-cloud-native-microservices-using-apache-camel"&gt;live webinar about developing cloud native microservices with Apache Camel&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://redhat.com/en/events/webinar/develop-cloud-native-microservices-using-apache-camel"&gt;&lt;img border="0" data-original-height="344" data-original-width="839" height="163" src="https://2.bp.blogspot.com/-G0gyNWTRyVU/XEry9cY9U7I/AAAAAAAAB2U/MR9gLkMbjIw9a-0FfaWLdkNnNLFuEAQIgCLcBGAs/s400/camel-webinar.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The session is scheduled for a full hour including QA. The talk with be a mix of slides and live demos. It will be my first talk with revealing details about Apache Camel 3 and a peak and demo of &lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt; (next-gen serverless Camel on Kubernetes).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The abstract of the talk is as follows&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Apache Camel has fundamentally changed the way enterprise Java developers think about system-to-system integration by making enterprise integration patterns (EIP) a simple declaration in a lightweight application—wrapped and delivered as a single JAR.&lt;br /&gt;&lt;br /&gt;In this webinar, we’ll show you how to bring EIP best practices to containers running on top of Kubernetes and deployed as Spring Boot microservices, which are both cloud-native and cloud-portable.&lt;br /&gt;&lt;br /&gt;We'll discuss:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;How building and designing cloud-native microservices impacts the way we develop.&lt;/li&gt;&lt;li&gt;How to build distributed and fault-tolerant microservices.&lt;/li&gt;&lt;li&gt;The upcoming Camel 3.0 release, which includes serverless capabilities via Camel K.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Registration&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The webinar is scheduled on thursday 31st of January at 11am ET (5pm CET) and is of course free to attend. All you need to do is to register at the &lt;a href="http://redhat.com/en/events/webinar/develop-cloud-native-microservices-using-apache-camel"&gt;provided link&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;More webinars&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We have talked about continuing the webinar with a series of Camel and agile integration talks. So if you are interested to hear more webinars and have requests for topics to be covered then we are open for feedback.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=tTUc3vzpj84:BDAhjHqDx-0:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=tTUc3vzpj84:BDAhjHqDx-0:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=tTUc3vzpj84:BDAhjHqDx-0:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=tTUc3vzpj84:BDAhjHqDx-0:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=tTUc3vzpj84:BDAhjHqDx-0:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=tTUc3vzpj84:BDAhjHqDx-0:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=tTUc3vzpj84:BDAhjHqDx-0:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/tTUc3vzpj84" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8iFvSDgqYqA" height="1" width="1" alt=""/&gt;</content><summary>On next thursday 31st January 2019 I am presenting a live webinar about developing cloud native microservices with Apache Camel. The session is scheduled for a full hour including QA. The talk with be a mix of slides and live demos. It will be my first talk with revealing details about Apache Camel 3 and a peak and demo of Camel K (next-gen serverless Camel on Kubernetes). The abstract of the talk...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2019-01-25T11:29:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/tTUc3vzpj84/webinar-develop-cloud-native.html</feedburner:origLink></entry><entry><title>Using VS Code to develop Spring Boot-based Camel and Red Hat Fuse projects</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8jp98KgtfRs/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="Fuse Tooling" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="tooling" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="VS Code Extensions" scheme="searchisko:content:tags" /><author><name>Aurélien Pupier</name></author><id>searchisko:content:id:jbossorg_blog-using_vs_code_to_develop_spring_boot_based_camel_and_red_hat_fuse_projects</id><updated>2019-01-24T13:00:53Z</updated><published>2019-01-24T13:00:53Z</published><content type="html">&lt;p&gt;Developing Apache Camel and &lt;a href="https://developers.redhat.com/products/fuse/overview/"&gt;Red Hat Fuse&lt;/a&gt; applications inside &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; is improving! In my &lt;a href="https://developers.redhat.com/blog/author/apupier/"&gt;previous articles&lt;/a&gt;, I&amp;#8217;ve mentioned that Camel URI completion is available in VS Code for &lt;a href="https://developers.redhat.com/blog/2018/02/15/apache-camel-uri-completion/"&gt;XML&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2018/07/10/apache-camel-uri-completion-with-java-dsl/"&gt;Java DSL&lt;/a&gt;. By leveraging several VS Code extensions, it is now possible to have an end-to-end development experience. The Camel tooling currently available in VS Code is primarily targeting Spring Boot– based Camel applications. The tooling covers the development process from creating a Camel project, testing, and debugging it locally, to automatically-rebuilding and redeploying it on your local &lt;a href="https://www.openshift.com/"&gt;OpenShift&lt;/a&gt;/&lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; instance when you make changes.&lt;/p&gt; &lt;p&gt;There are several ways to leverage the VS Code tooling. I will show the process which I believe is the easiest one to get started with.&lt;/p&gt; &lt;p&gt;&lt;span id="more-555957"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;With VS Code extensions, you can do the following in VS Code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a Fuse project&lt;/li&gt; &lt;li&gt;Auto-completion of Camel URI&lt;/li&gt; &lt;li&gt;Launch a test&lt;/li&gt; &lt;li&gt;Debug Java on your local machine&lt;/li&gt; &lt;li&gt;Deploy to a local OpenShift instance (&lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt;/minishift)&lt;/li&gt; &lt;li&gt;Auto-redeployment to OpenShift&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Let&amp;#8217;s see it in a video:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/okyaqCx6Pz0?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Extensions used&lt;/h2&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-555967 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/extensions.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/extensions.png" alt="" width="971" height="464" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/extensions.png 971w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/extensions-300x143.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/extensions-768x367.png 768w" sizes="(max-width: 971px) 100vw, 971px" /&gt;&lt;/p&gt; &lt;p&gt;The five extensions in the screenshot are very useful for Camel development. They are the ones that are used in the previous video.  You can use this line in the search bar to find them easily:&lt;/p&gt; &lt;p&gt;&lt;em&gt;&amp;#8220;Spring Boot Extension Pack&amp;#8221; | &amp;#8220;Java Extension Pack&amp;#8221; | &amp;#8220;Project Initializer by Red Hat&amp;#8221; | &amp;#8220;OpenShift Connector&amp;#8221; | &amp;#8220;Language Support for Apache Camel&amp;#8221;&lt;/em&gt;&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next?&lt;/h2&gt; &lt;p&gt;We need your feedback and you can help shape the future of the tools for Red Hat Fuse/Camel. There are still known limitations. Please try the extensions and vote for, or report, the additional features that you would like to see the most.&lt;/p&gt; &lt;h2&gt;Related Articles&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/07/using-the-yeoman-camel-project-generator-to-jump-start-a-project/" rel="bookmark"&gt;Jump start camel projects with the new yeoman-based project generator&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/28/announcing-red-hat-openshift-extension-for-visual-studio-code-public-preview/" rel="bookmark"&gt;Announcing the Red Hat OpenShift extension for Visual Studio Code&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/04/xml-language-server-vscode-extension/" rel="bookmark"&gt;VS Code XML Extension and the XML Language Server&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/27/camel-wordpress-integration/" rel="bookmark"&gt;Auto-generating news and publishing it to WordPress with Apache Camel&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/21/apache-camel-uri-completion-easy-installation-for-eclipse-vs-code-and-openshift-io/" rel="bookmark"&gt;Apache Camel URI completion: easy installation for Eclipse, VS Code, and OpenShift.io&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/" rel="bookmark"&gt;Extending Eclipse Che 7 to use VS Code extensions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/videos/youtube/zuEYtMvHN6g"&gt;Camel Riders in the Cloud&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#38;linkname=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F24%2Fvscode-camel-red-hat-fuse%2F&amp;#038;title=Using%20VS%20Code%20to%20develop%20Spring%20Boot-based%20Camel%20and%20Red%20Hat%20Fuse%20projects" data-a2a-url="https://developers.redhat.com/blog/2019/01/24/vscode-camel-red-hat-fuse/" data-a2a-title="Using VS Code to develop Spring Boot-based Camel and Red Hat Fuse projects"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/24/vscode-camel-red-hat-fuse/"&gt;Using VS Code to develop Spring Boot-based Camel and Red Hat Fuse projects&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8jp98KgtfRs" height="1" width="1" alt=""/&gt;</content><summary>Developing Apache Camel and Red Hat Fuse applications inside VS Code is improving! In my previous articles, I’ve mentioned that Camel URI completion is available in VS Code for XML and Java DSL. By leveraging several VS Code extensions, it is now possible to have an end-to-end development experience. The Camel tooling currently available in VS Code is primarily targeting Spring Boot– based Camel a...</summary><dc:creator>Aurélien Pupier</dc:creator><dc:date>2019-01-24T13:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/24/vscode-camel-red-hat-fuse/</feedburner:origLink></entry><entry><title>Visual Studio Code extension for generating jBPM Business Apps</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eB9sV8rQIg4/visual-studio-code-extension-for.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-visual_studio_code_extension_for_generating_jbpm_business_apps</id><updated>2019-01-23T18:18:13Z</updated><published>2019-01-23T18:18:00Z</published><content type="html">&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-4xJOUOucVlA/XEiu8GFM3LI/AAAAAAAAhvA/BBJ-Gn8laV8E9jgCSoNA1I6oe5a9vuGqgCLcBGAs/s1600/Screen%2BShot%2B2019-01-23%2Bat%2B1.13.44%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="607" data-original-width="1600" height="151" src="https://3.bp.blogspot.com/-4xJOUOucVlA/XEiu8GFM3LI/AAAAAAAAhvA/BBJ-Gn8laV8E9jgCSoNA1I6oe5a9vuGqgCLcBGAs/s400/Screen%2BShot%2B2019-01-23%2Bat%2B1.13.44%2BPM.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If you are developing your apps using &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;&amp;nbsp;you can now install a new &lt;a href="https://marketplace.visualstudio.com/items?itemName=tsurdilovic.jbavsc"&gt;jBPM Business Application extension&lt;/a&gt;. With this extension and the great tooling support of VSC you can now generate, develop, and launch your jBPM business apps without ever leaving your development environment.&lt;br /&gt;&lt;br /&gt;Here is the youtube video showcasing how to install and use this extension:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/Cc1Id2Cd8LU/0.jpg" src="https://www.youtube.com/embed/Cc1Id2Cd8LU?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The sources of the extension are on &lt;a href="https://github.com/BootstrapJBPM/jbavsc"&gt;github&lt;/a&gt;. We are looking for contributions to make this extension better in the future.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eB9sV8rQIg4" height="1" width="1" alt=""/&gt;</content><summary>If you are developing your apps using Visual Studio Code you can now install a new jBPM Business Application extension. With this extension and the great tooling support of VSC you can now generate, develop, and launch your jBPM business apps without ever leaving your development environment. Here is the youtube video showcasing how to install and use this extension: The sources of the extension a...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2019-01-23T18:18:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2019/01/visual-studio-code-extension-for.html</feedburner:origLink></entry><entry><title>How to configure a JDBC Appender for Red Hat Fuse 7 with Karaf</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nupGw334efo/" /><category term="Camel" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="jboss a-mq" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="JDBC" scheme="searchisko:content:tags" /><category term="JDBC Appender" scheme="searchisko:content:tags" /><category term="Karaf" scheme="searchisko:content:tags" /><category term="Oracle Database" scheme="searchisko:content:tags" /><category term="Oracle Database 11g" scheme="searchisko:content:tags" /><category term="persis" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><author><name>Chandra Shekhar Pandey</name></author><id>searchisko:content:id:jbossorg_blog-how_to_configure_a_jdbc_appender_for_red_hat_fuse_7_with_karaf</id><updated>2019-01-23T17:00:06Z</updated><published>2019-01-23T17:00:06Z</published><content type="html">&lt;p&gt;For some integration projects it is helpful to persist application logs in a relational database instead of a plain log file. In this article, I show how to configure a JDBC appender for &lt;a href="https://developers.redhat.com/products/fuse/overview/"&gt;Red Hat Fuse 7&lt;/a&gt; running in an Apache Karaf environment. There are instructions that describe &lt;a href="https://issues.jboss.org/browse/FUSEDOC-2969"&gt;how to persist messagess with PostgreSQL&lt;/a&gt;. Instead, I will show how to setup a JDBC appender for Oracle Database 11g.&lt;/p&gt; &lt;p&gt;I have tested this procedure with Oracle Database 11g Express Edition. A major difference I found is with the table syntax and the fact that the Oracle Database 11g sequence and trigger were required to auto-generate the primary key. Hence, users of Oracle Database 11g should find this article useful.&lt;/p&gt; &lt;p&gt;&lt;span id="more-552537"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;1. Create an &lt;code&gt;org.ops4j.datasource-oracleds.cfg&lt;/code&gt; file in the &lt;code&gt;FUSE_HOME/etc&lt;/code&gt; folder with the following content:&lt;/p&gt; &lt;pre&gt;databaseName=xe user=SYSTEM password=administrator dataSourceName=oracleds url=jdbc:oracle:thin:@192.168.1.10:1521/xe osgi.jdbc.driver.class=oracle.jdbc.OracleDriver&lt;/pre&gt; &lt;p&gt;2. Install the Oracle driver from the Karaf terminal using the following command:&lt;/p&gt; &lt;pre&gt; osgi:install -s wrap:mvn:com.oracle/ojdbc6/11.2.0.3 &lt;/pre&gt; &lt;p&gt;3. Install these features:&lt;/p&gt; &lt;pre&gt;feature:install jdbc jndi pax-jdbc-oracle &lt;/pre&gt; &lt;p&gt;4. Check &lt;code&gt;service:list&lt;/code&gt; for the &lt;code&gt;DataSourceFactory&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;karaf@root()&amp;#62; service:list DataSourceFactory [org.osgi.service.jdbc.DataSourceFactory] ----------------------------------------- osgi.jdbc.driver.class = oracle.jdbc.OracleDriver osgi.jdbc.driver.name = wrap_mvn_com.oracle_ojdbc6_11.2.0.3 osgi.jdbc.driver.version = 0.0.0 service.bundleid = 223 service.id = 259 service.scope = singleton Provided by : wrap_mvn_com.oracle_ojdbc6_11.2.0.3 (223) Used by: OPS4J Pax JDBC Config (239) [org.osgi.service.jdbc.DataSourceFactory] ----------------------------------------- osgi.jdbc.driver.class = oracle.jdbc.OracleDriver osgi.jdbc.driver.name = oracle service.bundleid = 237 service.id = 246 service.scope = singleton Provided by : OPS4J Pax JDBC Oracle Driver Adapter (237) Used by: OPS4J Pax JDBC Config (239) &lt;/pre&gt; &lt;p&gt;5. Check &lt;code&gt;service:list&lt;/code&gt; for the &lt;code&gt;DataSource&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt; karaf@root()&amp;#62; service:list DataSource [javax.sql.DataSource] ---------------------- databaseName = xe dataSourceName = oracleds felix.fileinstall.filename = file:/home/cpandey/NotBackedUp/Development/RedHat_Fuse_Folder/fuse7_2/fuse-karaf-7.2.0.fuse-720035-redhat-00001/etc/org.ops4j.datasource-oracleds.cfg osgi.jdbc.driver.class = oracle.jdbc.OracleDriver osgi.jndi.service.name = oracleds password = administrator pax.jdbc.managed = true service.bundleid = 239 service.factoryPid = org.ops4j.datasource service.id = 261 service.pid = org.ops4j.datasource.a6fadb91-16e5-43bb-8990-bbbaa553be8d service.scope = singleton url = jdbc:oracle:thin:@192.168.1.10:1521/xe user = SYSTEM Provided by : OPS4J Pax JDBC Config (239) Used by: OPS4J Pax Logging - Log4j v2 (8) &lt;/pre&gt; &lt;p&gt;6. Create the event table:&lt;/p&gt; &lt;pre&gt;CREATE TABLE "SYSTEM"."EVENTS" ( "EVENT_ID" NUMBER(10,0) NOT NULL ENABLE, "EVENT_DATE" TIMESTAMP (0), "EVENT_LEVEL" VARCHAR2(5), "EVENT_SOURCE" VARCHAR2(128), "EVENT_THREAD_ID" VARCHAR2(128), "EVENT_MESSAGE" VARCHAR2(1024), CONSTRAINT "EVENT_ID_PK" PRIMARY KEY ("EVENT_ID")); &lt;/pre&gt; &lt;p&gt;The table create statement can also be executed from the Karaf terminal:&lt;/p&gt; &lt;pre&gt;karaf@root()&amp;#62; jdbc:execute oracleds 'CREATE TABLE "EVENTS" ("EVENT_ID" NUMBER(10,0) NOT NULL ENABLE, "EVENT_DATE" TIMESTAMP (0), "EVENT_LEVEL" VARCHAR2(5), "EVENT_SOURCE" VARCHAR2(128), "EVENT_THREAD_ID" VARCHAR2(128), "EVENT_MESSAGE" VARCHAR2(1024), CONSTRAINT "EVENT_ID_PK" PRIMARY KEY ("EVENT_ID"))' &lt;/pre&gt; &lt;p&gt;I find doing that way is very useful. It would also test whether the datasource is set correctly or not.&lt;/p&gt; &lt;p&gt;7. In the database, we need to create a sequence and trigger.&lt;/p&gt; &lt;p&gt;Sequence:&lt;/p&gt; &lt;pre&gt;create sequence events_seq start with 1 increment by 1; &lt;/pre&gt; &lt;p&gt;Trigger:&lt;/p&gt; &lt;pre&gt;create or replace trigger events_seq_tr before insert on events for each row when (new.event_id is null) begin select events_seq.nextval into :new.event_id from dual; END; &lt;/pre&gt; &lt;p&gt;Note the terminating semicolon in the trigger.&lt;/p&gt; &lt;p&gt;8. In &lt;code&gt;FUSE_HOME/etc/org.ops4j.pax.logging.cfg&lt;/code&gt;, set the following:&lt;/p&gt; &lt;pre&gt;log4j2.rootLogger.appenderRef.JdbcAppender.ref = JdbcAppender log4j2.appender.jdbc.type = JDBC log4j2.appender.jdbc.name = JdbcAppender log4j2.appender.jdbc.tableName = EVENTS log4j2.appender.jdbc.cs.type = DataSource log4j2.appender.jdbc.cs.jndiName = osgi:service/oracleds log4j2.appender.jdbc.c1.type = Column log4j2.appender.jdbc.c1.name = EVENT_DATE log4j2.appender.jdbc.c1.isEventTimestamp = true log4j2.appender.jdbc.c2.type = Column log4j2.appender.jdbc.c2.name = EVENT_LEVEL log4j2.appender.jdbc.c2.pattern = %level # setNString vs setString log4j2.appender.jdbc.c2.isUnicode = false log4j2.appender.jdbc.c3.type = Column log4j2.appender.jdbc.c3.name = EVENT_SOURCE log4j2.appender.jdbc.c3.pattern = %logger log4j2.appender.jdbc.c3.isUnicode = false log4j2.appender.jdbc.c4.type = Column log4j2.appender.jdbc.c4.name = EVENT_THREAD_ID log4j2.appender.jdbc.c4.pattern = %thread log4j2.appender.jdbc.c4.isUnicode = false log4j2.appender.jdbc.c5.type = Column log4j2.appender.jdbc.c5.name = EVENT_MESSAGE log4j2.appender.jdbc.c5.pattern = %message log4j2.appender.jdbc.c5.isUnicode = false &lt;/pre&gt; &lt;p&gt;9. Test using this command:&lt;/p&gt; &lt;pre&gt;karaf@root()&amp;#62; log:log "hey test 123" &lt;/pre&gt; &lt;p&gt;10. Red Hat Fuse log you would get:&lt;/p&gt; &lt;pre&gt;2019-01-04 19:26:46,098 | INFO | pipe-log:set INFO | o.a.k.l.core | 135 - org.apache.karaf.log.core - 4.2.0.fuse-720061-redhat-00001 | hey csp 123 2019-01-04 19:29:18,273 | INFO | g:log "hey test 123" | o.a.k.l.core | 135 - org.apache.karaf.log.core - 4.2.0.fuse-720061-redhat-00001 | hey test 123 &lt;/pre&gt; &lt;p&gt;11. In the database, execute &lt;code&gt;select * from events;&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;EVENT_ID EVENT_DATE EVENT_LEVEL EVENT_SOURCE EVENT_THREAD_ID EVENT_MESSAGE 199 2019-01-04 19:25:42 INFO org.apache.karaf.log.core pipe-log:set INFO hey csp 200 2019-01-04 19:26:08 INFO org.apache.karaf.log.core pipe-log:set INFO hey csp123 201 2019-01-04 19:26:46 INFO org.apache.karaf.log.core pipe-log:set INFO hey csp 123 202 2019-01-04 19:29:18 INFO org.apache.karaf.log.core pipe-log:log "hey test 123" hey test 123 &lt;/pre&gt; &lt;p&gt;That&amp;#8217;s it. I hope this article will not only help you configure a JDBC appender for persisting logs on Oracle Database 11g but also configure a datasource with Red Hat Fuse 7 in a Karaf environment. It should also help you gain some hands-on experience with Karaf commands.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#38;linkname=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F23%2Fhow-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf%2F&amp;#038;title=How%20to%20configure%20a%20JDBC%20Appender%20for%20Red%20Hat%20Fuse%207%20with%20Karaf" data-a2a-url="https://developers.redhat.com/blog/2019/01/23/how-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf/" data-a2a-title="How to configure a JDBC Appender for Red Hat Fuse 7 with Karaf"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/23/how-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf/"&gt;How to configure a JDBC Appender for Red Hat Fuse 7 with Karaf&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nupGw334efo" height="1" width="1" alt=""/&gt;</content><summary>For some integration projects it is helpful to persist application logs in a relational database instead of a plain log file. In this article, I show how to configure a JDBC appender for Red Hat Fuse 7 running in an Apache Karaf environment. There are instructions that describe how to persist messagess with PostgreSQL. Instead, I will show how to setup a JDBC appender for Oracle Database 11g. I ha...</summary><dc:creator>Chandra Shekhar Pandey</dc:creator><dc:date>2019-01-23T17:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/23/how-to-configure-jdbc-appender-for-red-hat-fuse-7-wiht-karaf/</feedburner:origLink></entry><entry><title>Modern Process Integration Tooling Workshop Updated to Process Automation Manager 7.2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4WNySnvb7o8/modern-process-integration-tooling-workshop-update-process-automation-manager-72.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-modern_process_integration_tooling_workshop_updated_to_process_automation_manager_7_2</id><updated>2019-01-25T12:54:00Z</updated><published>2019-01-23T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhpam/lab01.html#/" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;" target="_blank"&gt;&lt;img alt="process automation manager workshops" border="0" data-original-height="848" data-original-width="1600" height="169" src="https://3.bp.blogspot.com/-mGrTrJ1DcC8/XEsGPxcAKpI/AAAAAAAAtaM/Ye6_ODchzjwYHKljDB-mX_LYAFO-lYh4QCLcBGAs/s320/Screenshot%2B2019-01-25%2Bat%2B13.50.43.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Click to start workshop&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;Recently I've started updating my &lt;a href="https://bpmworkshop.gitlab.io/#/" target="_blank"&gt;free online rules and process automation workshops&lt;/a&gt; that showcase how to get started using modern business logic tooling.&lt;br /&gt;&lt;br /&gt;These updates start with moving from JBoss BPM&amp;nbsp; to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager.&lt;br /&gt;&lt;br /&gt;These updates started with version Process Automation Manager version 7.1, but decided to update to the latest release that came out this week.&lt;br /&gt;&lt;br /&gt;This announcement means the entire workshop has been updated to use Process Automation Manager 7.2, but the obvious place to start is with the installation.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Lab 1 - Installation&lt;/h3&gt;This lab is the first step on learning to develop a process integration project. It's all about getting the Process Automation tooling installed locally on your laptop for running the rest of the workshop.&lt;br /&gt;&lt;br /&gt;The easiest way is to just &lt;a href="https://bpmworkshop.gitlab.io/rhpam/lab01.html#/1" target="_blank"&gt;jump right into lab 1&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhpam/lab01.html#/1" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Comments or feedback on any part of the workshop that might not be clear, just reach out.&lt;br /&gt;&lt;br /&gt;Stay tuned for the next lab update, coming soon!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=gaRHd2YYkZU:8s2PmgovgHk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=gaRHd2YYkZU:8s2PmgovgHk:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=gaRHd2YYkZU:8s2PmgovgHk:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=gaRHd2YYkZU:8s2PmgovgHk:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=gaRHd2YYkZU:8s2PmgovgHk:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=gaRHd2YYkZU:8s2PmgovgHk:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=gaRHd2YYkZU:8s2PmgovgHk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=gaRHd2YYkZU:8s2PmgovgHk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=gaRHd2YYkZU:8s2PmgovgHk:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=gaRHd2YYkZU:8s2PmgovgHk:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=gaRHd2YYkZU:8s2PmgovgHk:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/gaRHd2YYkZU" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4WNySnvb7o8" height="1" width="1" alt=""/&gt;</content><summary>Click to start workshop Recently I've started updating my free online rules and process automation workshops that showcase how to get started using modern business logic tooling. These updates start with moving from JBoss BPM  to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager. These updates started with version Process Automation Manager version 7.1, but de...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-01-23T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/gaRHd2YYkZU/modern-process-integration-tooling-workshop-update-process-automation-manager-72.html</feedburner:origLink></entry><entry><title>Testing CDI Beans and the Persistence Layer Under Java SE</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/CNgSXvjzhIo/" /><category term="Discussions" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><author><name>Gunnar Morling</name></author><id>searchisko:content:id:jbossorg_blog-testing_cdi_beans_and_the_persistence_layer_under_java_se</id><updated>2019-01-23T15:18:41Z</updated><published>2019-01-23T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When it comes to testing Java EE applications, there’s a wide spectrum of tools and approaches at our disposal. Depending on the specific goals and requirements of a given test, options range from plain unit tests of single classes to comprehensive integration tests deployed into a container (e.g. via &lt;a href="http://arquillian.org/"&gt;Arquillian&lt;/a&gt;) and driven through tools such as &lt;a href="http://rest-assured.io/"&gt;REST Assured&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In this post I’d like to discuss one testing approach which represents some kind of a middle ground: launching a local CDI container and a JPA runtime, connected to an in-memory database. That way you can test CDI beans (e.g. containing business logic) in conjunction with the persistence layer (e.g. JPA-based repositories) under plain Java SE.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This allows to test individual classes and components as they interact with others (e.g. without mocking of repositories when testing the business logic), while still benefitting from fast execution times (no container management/deployment and remote API calls needed). The approach also allows tests around services our application might rely on, such as interceptors, events, transactional semantics and other things that’d otherwise require deployment into a container. Finally, these tests are easy to debug, as everything runs in the local VM and no remote processes are involved.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To make the approach worthwhile, the following things should be enabled by the testing infrastructure:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Obtaining CDI beans via dependency injection, with support for all the CDI goodness such as interceptors, decorators, events etc.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Obtaining a JPA entity manager via dependency injection&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Dependency injection in JPA entity listeners&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Declarative transaction control via &lt;code&gt;@Transactional&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Transactional event observers (e.g. event observers running after transaction completion)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the following let’s see how these requirements can be addressed. You can find a complete version of the shown code in the Hibernate &lt;a href="https://github.com/hibernate/hibernate-demos/tree/master/other/cdi-jpa-testing"&gt;examples repository&lt;/a&gt; on GitHub. That example project uses &lt;a href="https://weld.cdi-spec.org/"&gt;Weld&lt;/a&gt; as the CDI container, &lt;a href="https://hibernate.org/orm/"&gt;Hibernate ORM&lt;/a&gt; as the JPA provider and &lt;a href="http://www.h2database.com/html/main.html"&gt;H2&lt;/a&gt; as a database. Note the post is mostly focused on the interaction of CDI and the persistence layer, you could also use this approach with any other database such as Postgres or MySQL.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="obtaining-cdi-beans-via-dependency-injection"&gt;&lt;a class="anchor" href="#obtaining-cdi-beans-via-dependency-injection"&gt;&lt;/a&gt;Obtaining CDI Beans via Dependency Injection&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Firing up a CDI container under Java SE is trivial using the &lt;a href="http://www.cdi-spec.org/news/2017/05/15/CDI_2_is_released/"&gt;bootstrap API&lt;/a&gt; standardized in CDI 2.0. So we could simply go and use that API in our tests. One alternative to consider is &lt;a href="https://github.com/weld/weld-junit"&gt;Weld JUnit&lt;/a&gt;, a small extension to Weld (the CDI reference implementation) aimed at the purposes of testing. Amongst other things, Weld JUnit allows for injecting dependencies into test class and for enabling specific CDI scopes during the test. This comes in handy when testing &lt;code&gt;@RequestScoped&lt;/code&gt; beans for instance.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A first simple test using Weld JUnit could look like this (note I’m using the JUnit 4 API here, but Weld JUnit also comes with &lt;a href="https://github.com/weld/weld-junit/blob/master/junit5/README.md"&gt;support for JUnit 5&lt;/a&gt;):&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;SimpleCdiTest&lt;/span&gt; { &lt;span style="color:#007"&gt;@Rule&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; WeldInitiator weld = WeldInitiator.from(GreetingService.class) .activate(RequestScoped.class) .inject(&lt;span style="color:#950"&gt;this&lt;/span&gt;) .build(); &lt;span style="color:#007"&gt;@Inject&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; GreetingService greeter; &lt;span style="color:#007"&gt;@Test&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; helloWorld() { assertThat(greeter.greet(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;Java&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;)).isEqualTo(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;Hello, Java&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="obtaining-a-jpa-entity-manager-via-dependency-injection"&gt;&lt;a class="anchor" href="#obtaining-a-jpa-entity-manager-via-dependency-injection"&gt;&lt;/a&gt;Obtaining a JPA Entity Manager via Dependency Injection&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the next step let’s see how we can obtain a JPA entity manager via dependency injection. Usually you’d obtain such reference using the &lt;code&gt;@PersistenceContext&lt;/code&gt; annotation (and indeed Weld JUnit provides a way to enable that), but for the sake of consistency with other injection points I prefer to obtain entity managers via &lt;code&gt;@Inject&lt;/code&gt; as defined by &lt;a href="https://www.jcp.org/en/jsr/detail?id=330"&gt;JSR 330&lt;/a&gt;. This also allows for constructor injection instead of field injection.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To do so, we can simply define a CDI producer for &lt;code&gt;EntityManagerFactory&lt;/code&gt; like this:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;EntityManagerFactoryProducer&lt;/span&gt; { &lt;span style="color:#007"&gt;@Produces&lt;/span&gt; &lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; EntityManagerFactory produceEntityManagerFactory() { &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; Persistence.createEntityManagerFactory(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;myPu&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;()); } &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; close(&lt;span style="color:#007"&gt;@Disposes&lt;/span&gt; EntityManagerFactory entityManagerFactory) { entityManagerFactory.close(); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This uses the JPA bootstrap API to build an (application-scoped) entity manager factory. In a similar way, a request-scoped entity manager bean can be produced:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;EntityManagerProducer&lt;/span&gt; { &lt;span style="color:#007"&gt;@Inject&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; EntityManagerFactory entityManagerFactory; &lt;span style="color:#007"&gt;@Produces&lt;/span&gt; &lt;span style="color:#007"&gt;@RequestScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; EntityManager produceEntityManager() { &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; entityManagerFactory.createEntityManager(); } &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; close(&lt;span style="color:#007"&gt;@Disposes&lt;/span&gt; EntityManager entityManager) { entityManager.close(); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that you’d have to register these beans as &lt;a href="https://docs.jboss.org/weld/reference/latest/en-US/html/specialization.html"&gt;alternatives&lt;/a&gt; in case you already had such producers in your main code.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With the producers in place, we can inject an entity manager into CDI beans via &lt;code&gt;@Inject&lt;/code&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;GreetingService&lt;/span&gt; { &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;final&lt;/span&gt; EntityManager entityManager; &lt;span style="color:#007"&gt;@Inject&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; GreetingService(EntityManager entityManager) { &lt;span style="color:#950"&gt;this&lt;/span&gt;.entityManager = entityManager; } &lt;span style="color:#777"&gt;// ...&lt;/span&gt; }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="dependency-injection-in-jpa-entity-listeners"&gt;&lt;a class="anchor" href="#dependency-injection-in-jpa-entity-listeners"&gt;&lt;/a&gt;Dependency Injection in JPA Entity Listeners&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;JPA 2.1 introduced support for CDI within JPA entity listeners. For this to work, the JPA provider (e.g. Hibernate ORM) must have a reference to the current CDI bean manager.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In an application server such as &lt;a href="http://wildfly.org/"&gt;WildFly&lt;/a&gt;, the container would do that wiring automatically for us. For our test set-up, we need to pass the bean manager reference ourselves when bootstrapping JPA. Luckily, that’s not too complicated; in the &lt;code&gt;EntityManagerFactoryProducer&lt;/code&gt; class we can obtain a &lt;code&gt;BeanManager&lt;/code&gt; instance via &lt;code&gt;@Inject&lt;/code&gt; and then pass it on to JPA using the "javax.persistence.bean.manager" property key:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@Inject&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; BeanManager beanManager; &lt;span style="color:#007"&gt;@Produces&lt;/span&gt; &lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; EntityManagerFactory produceEntityManagerFactory() { &lt;span style="color:#0a8;font-weight:bold"&gt;Map&lt;/span&gt;&amp;lt;&lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt;, &lt;span style="color:#0a8;font-weight:bold"&gt;Object&lt;/span&gt;&amp;gt; props = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;(); props.put(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;javax.persistence.bean.manager&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;, beanManager); &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; Persistence.createEntityManagerFactory(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;myPu&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;, props); }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This lets us make use of dependency injection within JPA entity listeners:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;SomeListener&lt;/span&gt; { &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;final&lt;/span&gt; GreetingService greetingService; &lt;span style="color:#007"&gt;@Inject&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; SomeListener(GreetingService greetingService) { &lt;span style="color:#950"&gt;this&lt;/span&gt;.greetingService = greetingService; } &lt;span style="color:#007"&gt;@PostPersist&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; onPostPersist(TestEntity entity) { greetingService.greet(entity.getName()); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="declarative-transaction-control-via-code-transactional-code-and-transactional-event-observers"&gt;&lt;a class="anchor" href="#declarative-transaction-control-via-code-transactional-code-and-transactional-event-observers"&gt;&lt;/a&gt;Declarative Transaction Control via &lt;code&gt;@Transactional&lt;/code&gt; and transactional event observers&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The last missing piece to satisfy our original requirements is support for the &lt;code&gt;@Transactional&lt;/code&gt; annotation and transactional event observers. This one is a bit more complex to tackle, as it requires the integration of a transaction manager compatible with JTA (the Java Transaction API).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the following we’re going to use &lt;a href="http://narayana.io/"&gt;Narayana&lt;/a&gt; which also is the transaction manager used in WildFly. For Narayana to work, a JNDI server is needed, from which it can obtain the JTA datasource. Furthermore, the Weld JTA module is required. Please refer to the &lt;a href="https://github.com/hibernate/hibernate-demos/blob/master/other/cdi-jpa-testing/pom.xml"&gt;pom.xml&lt;/a&gt; of the example project for the exact artifact ids and versions.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With these dependencies in place, the next step is to plug in a custom &lt;code&gt;ConnectionProvider&lt;/code&gt; into Hibernate ORM, which makes sure that Hibernate ORM works with &lt;code&gt;Connection&lt;/code&gt; objects that use transactions managed by Narayana. Thankfully, my colleague Gytis Trikleris has provided &lt;a href="https://github.com/jbosstm/quickstart/blob/master/jta-and-hibernate-standalone/src/main/java/org/jboss/narayana/quickstart/jta/TransactionalConnectionProvider.java"&gt;such implementation&lt;/a&gt; already as part of the Narayana examples on GitHub. I’m shamelessly going to copy this implementation:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;TransactionalConnectionProvider&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;implements&lt;/span&gt; ConnectionProvider { &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;static&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;final&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt; DATASOURCE_JNDI = &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;java:testDS&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;static&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;final&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt; USERNAME = &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;sa&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;static&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;final&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt; PASSWORD = &lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;; &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;final&lt;/span&gt; TransactionalDriver transactionalDriver; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; TransactionalConnectionProvider() { transactionalDriver = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; TransactionalDriver(); } &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;static&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; bindDataSource() { JdbcDataSource dataSource = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; JdbcDataSource(); dataSource.setURL(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;); dataSource.setUser(USERNAME); dataSource.setPassword(PASSWORD); &lt;span style="color:#080;font-weight:bold"&gt;try&lt;/span&gt; { &lt;span style="color:#0a8;font-weight:bold"&gt;InitialContext&lt;/span&gt; initialContext = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;InitialContext&lt;/span&gt;(); initialContext.bind(DATASOURCE_JNDI, dataSource); } &lt;span style="color:#080;font-weight:bold"&gt;catch&lt;/span&gt; (&lt;span style="color:#C00;font-weight:bold"&gt;NamingException&lt;/span&gt; e) { &lt;span style="color:#080;font-weight:bold"&gt;throw&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; &lt;span style="color:#C00;font-weight:bold"&gt;RuntimeException&lt;/span&gt;(e); } } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;Connection&lt;/span&gt; getConnection() &lt;span style="color:#088;font-weight:bold"&gt;throws&lt;/span&gt; &lt;span style="color:#C00;font-weight:bold"&gt;SQLException&lt;/span&gt; { &lt;span style="color:#0a8;font-weight:bold"&gt;Properties&lt;/span&gt; properties = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;Properties&lt;/span&gt;(); properties.setProperty(TransactionalDriver.userName, USERNAME); properties.setProperty(TransactionalDriver.password, PASSWORD); &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; transactionalDriver.connect(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;jdbc:arjuna:&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt; + DATASOURCE_JNDI, properties); } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; closeConnection(&lt;span style="color:#0a8;font-weight:bold"&gt;Connection&lt;/span&gt; connection) &lt;span style="color:#088;font-weight:bold"&gt;throws&lt;/span&gt; &lt;span style="color:#C00;font-weight:bold"&gt;SQLException&lt;/span&gt; { &lt;span style="color:#080;font-weight:bold"&gt;if&lt;/span&gt; (!connection.isClosed()) { connection.close(); } } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;boolean&lt;/span&gt; supportsAggressiveRelease() { &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; &lt;span style="color:#069"&gt;false&lt;/span&gt;; } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;boolean&lt;/span&gt; isUnwrappableAs(&lt;span style="color:#0a8;font-weight:bold"&gt;Class&lt;/span&gt; aClass) { &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; getClass().isAssignableFrom(aClass); } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T unwrap(&lt;span style="color:#0a8;font-weight:bold"&gt;Class&lt;/span&gt;&amp;lt;T&amp;gt; aClass) { &lt;span style="color:#080;font-weight:bold"&gt;if&lt;/span&gt; (isUnwrappableAs(aClass)) { &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; (T) &lt;span style="color:#950"&gt;this&lt;/span&gt;; } &lt;span style="color:#080;font-weight:bold"&gt;throw&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; UnknownUnwrapTypeException(aClass); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This registers an H2 datasource with JNDI, from where Narayana’s &lt;code&gt;TransactionalDriver&lt;/code&gt; will fetch it when Hibernate ORM requests a connection. This connection will use JTA transactions, no matter whether transactions are controlled declaratively (through &lt;code&gt;@Transactional&lt;/code&gt;), via an injected &lt;code&gt;UserTransaction&lt;/code&gt; or using the entity manager transaction API.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;code&gt;bindDataSource()&lt;/code&gt; method must be called before test execution. It’s a good idea to encapsulate that step in a custom &lt;a href="https://github.com/junit-team/junit4/wiki/rules"&gt;JUnit rule&lt;/a&gt;, that way this set-up can easily be re-used in different tests:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;JtaEnvironment&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;extends&lt;/span&gt; ExternalResource { &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; NamingBeanImpl NAMING_BEAN; &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;protected&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; before() &lt;span style="color:#088;font-weight:bold"&gt;throws&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;Throwable&lt;/span&gt; { NAMING_BEAN = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; NamingBeanImpl(); NAMING_BEAN.start(); JNDIManager.bindJTAImplementation(); TransactionalConnectionProvider.bindDataSource(); } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;protected&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; after() { NAMING_BEAN.stop(); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This will start the JNDI server and bind the transaction manager as well as the datasource to the JNDI tree. In actual test classes all we need to do then is to create an instance of that rule and annotate the field with &lt;code&gt;@Rule&lt;/code&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;CdiJpaTest&lt;/span&gt; { &lt;span style="color:#007"&gt;@ClassRule&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;static&lt;/span&gt; JtaEnvironment jtaEnvironment = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; JtaEnvironment(); &lt;span style="color:#007"&gt;@Rule&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; WeldInitiator weld = ...; &lt;span style="color:#007"&gt;@Test&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; someTest() { &lt;span style="color:#777"&gt;// ...&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the next step that connection provider must be registered with Hibernate ORM. This could be done in &lt;em&gt;persistence.xml&lt;/em&gt;, but as this provider only should be used during testing, a better place is our entity manager factory producer method:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@Produces&lt;/span&gt; &lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; EntityManagerFactory produceEntityManagerFactory() { &lt;span style="color:#0a8;font-weight:bold"&gt;Map&lt;/span&gt;&amp;lt;&lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt;, &lt;span style="color:#0a8;font-weight:bold"&gt;Object&lt;/span&gt;&amp;gt; props = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;(); props.put(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;javax.persistence.bean.manager&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;, beanManager); props.put(Environment.CONNECTION_PROVIDER, TransactionalConnectionProvider.class); &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; Persistence.createEntityManagerFactory(&lt;span style="background-color:hsla(0,100%,50%,0.05)"&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;span style="color:#D20"&gt;myPu&lt;/span&gt;&lt;span style="color:#710"&gt;"&lt;/span&gt;&lt;/span&gt;, props); }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In order to hook up Weld with the transaction manager, an implementation of Weld’s &lt;a href="https://docs.jboss.org/weld/javadoc/3.0/weld-spi/index.html?org/jboss/weld/transaction/spi/TransactionServices.html"&gt;TransactionServices&lt;/a&gt; SPI is needed:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;TestingTransactionServices&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;implements&lt;/span&gt; TransactionServices { &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; cleanup() { } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; registerSynchronization(Synchronization synchronizedObserver) { jtaPropertyManager.getJTAEnvironmentBean() .getTransactionSynchronizationRegistry() .registerInterposedSynchronization(synchronizedObserver); } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;boolean&lt;/span&gt; isTransactionActive() { &lt;span style="color:#080;font-weight:bold"&gt;try&lt;/span&gt; { &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; com.arjuna.ats.jta.UserTransaction.userTransaction().getStatus() == Status.STATUS_ACTIVE; } &lt;span style="color:#080;font-weight:bold"&gt;catch&lt;/span&gt; (SystemException e) { &lt;span style="color:#080;font-weight:bold"&gt;throw&lt;/span&gt; &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; &lt;span style="color:#C00;font-weight:bold"&gt;RuntimeException&lt;/span&gt;(e); } } &lt;span style="color:#007"&gt;@Override&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; UserTransaction getUserTransaction() { &lt;span style="color:#080;font-weight:bold"&gt;return&lt;/span&gt; com.arjuna.ats.jta.UserTransaction.userTransaction(); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This lets Weld&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;register JTA synchronizations (which is used to make transactional observer methods work),&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;query for the current transaction status and&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;obtain the user transaction (so to enable injection of the &lt;code&gt;UserTransaction&lt;/code&gt; object).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;code&gt;TransactionServices&lt;/code&gt; implementation is picked up using the service loader mechanism, so a file &lt;em&gt;META-INF/services/org.jboss.weld.bootstrap.api.Service&lt;/em&gt; with the fully-qualified name of our implementation as its contents is required:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;org.hibernate.demos.jpacditesting.support.TestingTransactionServices&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;And with that, we can now test code like this which makes use of transactional observers:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;SomeObserver&lt;/span&gt; { &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; observes(&lt;span style="color:#007"&gt;@Observes&lt;/span&gt;(during=TransactionPhase.AFTER_COMPLETION) &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt; event) { &lt;span style="color:#777"&gt;// handle event ...&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We also can use JTA’s &lt;code&gt;@Transactional&lt;/code&gt; annotation to benefit from declarative transaction control:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@ApplicationScoped&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;TransactionalGreetingService&lt;/span&gt; { &lt;span style="color:#007"&gt;@Transactional&lt;/span&gt;(TxType.REQUIRED) &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt; greet(&lt;span style="color:#0a8;font-weight:bold"&gt;String&lt;/span&gt; name) { &lt;span style="color:#777"&gt;// ...&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When this &lt;code&gt;greet()&lt;/code&gt; method is invoked, it must be run in a transaction context, which either has been started before or will be started if needed. Now, if you have used transactional CDI beans before, you might wonder where the associated method interceptor is. As it turns out, Narayana comes with CDI support and provides us with everything needed: method interceptors for the different transactional behaviours (&lt;code&gt;REQUIRED&lt;/code&gt;, &lt;code&gt;MANDATORY&lt;/code&gt; etc.) as well as a portable extension which registers the interceptors with the CDI container.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="configuring-the-weld-initiator"&gt;&lt;a class="anchor" href="#configuring-the-weld-initiator"&gt;&lt;/a&gt;Configuring the Weld Initiator&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;There’s one last detail we have ignored so far, and that is how Weld will detect all the beans we need for our test, be it actual components under test such as &lt;code&gt;GreetingService&lt;/code&gt;, or testing infrastructure such as the &lt;code&gt;EntityManagerProducer&lt;/code&gt;. The simplest is to let Weld scan the classpath itself and pick up all beans it finds. This is enabled by passing a new &lt;code&gt;Weld&lt;/code&gt; instance to the &lt;code&gt;WeldInitiator&lt;/code&gt; rule:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;class&lt;/span&gt; &lt;span style="color:#B06;font-weight:bold"&gt;CdiJpaTest&lt;/span&gt; { &lt;span style="color:#007"&gt;@ClassRule&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;static&lt;/span&gt; JtaEnvironment jtaEnvironment = &lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; JtaEnvironment(); &lt;span style="color:#007"&gt;@Rule&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; WeldInitiator weld = WeldInitiator.from(&lt;span style="color:#080;font-weight:bold"&gt;new&lt;/span&gt; Weld()) .activate(RequestScoped.class) .inject(&lt;span style="color:#950"&gt;this&lt;/span&gt;) .build(); &lt;span style="color:#007"&gt;@Inject&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; EntityManager entityManager; &lt;span style="color:#007"&gt;@Inject&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;private&lt;/span&gt; GreetingService greetingService; &lt;span style="color:#007"&gt;@Test&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; &lt;span style="color:#339;font-weight:bold"&gt;void&lt;/span&gt; someTest() { &lt;span style="color:#777"&gt;// ...&lt;/span&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;That’s very convenient, but it might cause some slowness for larger classpaths and e.g. expose alternative beans you don’t want to enable for a specific test. So alternatively, all bean types to be used during the test can be passed explicitly:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="java"&gt;&lt;span style="color:#007"&gt;@Rule&lt;/span&gt; &lt;span style="color:#088;font-weight:bold"&gt;public&lt;/span&gt; WeldInitiator weld = WeldInitiator.from( GreetingService.class, TransactionalGreetingService.class, EntityManagerProducer.class, EntityManagerFactoryProducer.class, TransactionExtension.class, &lt;span style="color:#777"&gt;// ...&lt;/span&gt; ) .activate(RequestScoped.class) .inject(&lt;span style="color:#950"&gt;this&lt;/span&gt;) .build();&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This avoids the classpath scanning but comes at the cost of increased efforts for writing and maintaining the test. Yet another approach is to use the &lt;code&gt;Weld#addPackages()&lt;/code&gt; method and specify the contents to be included at the granularity of packages. My recommendation would be to go for the classpath scanning approach and only switch over to explicitly listing all classes if the scanning actually isn’t feasible.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="summary"&gt;&lt;a class="anchor" href="#summary"&gt;&lt;/a&gt;Summary&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In this post we’ve explored how to test the CDI beans of an application in conjunction with the JPA-based persistence layer in a plain Java SE environment. This can be an interesting middle ground for certain tests, where you’d like to go beyond testing individual classes in complete isolation, but at the same time are shying away from running full-blown integration tests in a Java EE (or should I say, &lt;a href="https://jakarta.ee/"&gt;Jakarta EE&lt;/a&gt;) container.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Is this to say that all tests of an enterprise application should be implemented in the described way? Certainly not. Pure unit tests are a great choice in order to assert the correct internal functioning of a single class. Complete end-to-end integration tests make lots of sense to ensure that all the pieces and layers of an application correctly work together, from top to bottom. But the suggested alternative can be a very useful tool in the box to ensure correct interaction of business logic and persistence layer without incurring the overhead of container deployments, amongst other things testing correct transactional behaviour, transactional observer methods and entity listeners using CDI services.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;That being said, it’d be desirable if much less glue code was needed in order to realize these tests. While you we could encapsulate the management of the needed infrastructure in custom JUnit rule, ideally this already would be provided for us. So I’ve opened &lt;a href="https://github.com/weld/weld-junit/issues/65"&gt;a ticket&lt;/a&gt; in the Weld JUnit project, discussing the idea of creating a separate JPA/JTA module in the project. Simply adding the dependency to such module would then give you everything needed to get you started with testing your CDI beans and the persistence layer under Java SE. If you’re interested in this or perhaps even would like to work on this, make sure to get in touch with the Weld team.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find the complete source code for this blog post in our &lt;a href="https://github.com/hibernate/hibernate-demos/tree/master/other/cdi-jpa-testing"&gt;examples repository&lt;/a&gt;. Your feedback is more than welcomed, just add a comment below. Looking forward to hearing from you!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Many thanks to Guillaume Smet, Martin Kouba and Matej Novotny for their feedback while writing this post.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/CNgSXvjzhIo" height="1" width="1" alt=""/&gt;</content><summary>When it comes to testing Java EE applications, there’s a wide spectrum of tools and approaches at our disposal. Depending on the specific goals and requirements of a given test, options range from plain unit tests of single classes to comprehensive integration tests deployed into a container (e.g. via Arquillian) and driven through tools such as REST Assured. In this post I’d like to discuss one t...</summary><dc:creator>Gunnar Morling</dc:creator><dc:date>2019-01-23T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/01/23/testing-cdi-beans-and-persistence-layer-under-java-se/</feedburner:origLink></entry><entry><title>Extending Eclipse Che 7 to use VS Code extensions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TXZZwQRF5bo/" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="Eclipse Che 7" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="ide" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Theia" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="VS Code Extensions" scheme="searchisko:content:tags" /><author><name>Florent Benoit</name></author><id>searchisko:content:id:jbossorg_blog-extending_eclipse_che_7_to_use_vs_code_extensions</id><updated>2019-01-22T13:00:06Z</updated><published>2019-01-22T13:00:06Z</published><content type="html">&lt;p&gt;Recently the Eclipse Che community has been working to make Eclipse Theia the default web IDE for Eclipse Che 7. We’ve added a plugin model to Eclipse Theia that is compatible with &lt;a href="https://developers.redhat.com/blog/category/vs-code/"&gt;Visual Studio Code&lt;/a&gt; (VS Code) extensions. Che 7 users will eventually be able to take advantage of extensions that have been written for VS Code in their cloud-based developer workspaces. It&amp;#8217;s worth pointing out the popularity of VS Code extensions. Red Hat has &lt;a href="https://marketplace.visualstudio.com/publishers/redhat"&gt;contributed extensions&lt;/a&gt; covering &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"&gt;Java&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2018/12/04/xml-language-server-vscode-extension/"&gt;XML&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"&gt;YAML&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2018/11/28/announcing-red-hat-openshift-extension-for-visual-studio-code-public-preview/"&gt;OpenShift&lt;/a&gt;, and &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.fabric8-analytics"&gt;dependency analytics&lt;/a&gt;. The Java extension provided by Red Hat has been downloaded over 10 million times!&lt;/p&gt; &lt;p&gt;If you aren&amp;#8217;t familiar with Eclipse Theia, Che 6 and earlier used a GWT-based IDE. While it is possible to develop and use plugins in that environment, it is cumbersome. Coming from tools like VS Code, developers expect to be able to customize and extend their workspaces at runtime. Eclipse Theia is an extensible open-source framework to develop multi-language IDEs using state-of-the-art web technologies. Moving to Theia as the default IDE for Che 7 provides a foundation to enrich the developer workspaces in Che. See the &lt;a href="https://developers.redhat.com/blog/2018/12/18/eclipse-che-7-coming-part-1/"&gt;series of articles by Stevan LeMeur&lt;/a&gt; for more information about what&amp;#8217;s coming in Che 7.&lt;/p&gt; &lt;p&gt;This article explains why we decided to add the new plugin model to Eclipse Theia and the benefits for Eclipse Che 7 developer workspaces. I also cover how the new plugin model differs from the existing Theia extension model.&lt;span id="more-554947"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Drawbacks of the previous GWT-based IDE&lt;/h2&gt; &lt;p&gt;There were a number drawbacks with the GWT-based IDE used in Che 6 and earlier. Adding a plugin requires stopping, recompiling, and reloading the whole IDE. Experiments were tried to dynamically load JavaScript plugins using &lt;a href="http://www.gwtproject.org/doc/latest/DevGuideCodingBasicsJsInterop.html"&gt;JS-Interop&lt;/a&gt;. The GWT-based IDE provided a low-level API with the advantage that you could change anything, but the disadvantage is any plugin could break anything. Also, it is difficult to understand all of the entry points for the current API.&lt;/p&gt; &lt;p&gt;In the end, we also had to take into consideration that many people dislike GWT and feel it is a technology of the past.&lt;/p&gt; &lt;h2&gt;Requirements for extensibility&lt;/h2&gt; &lt;p&gt;Based on our experiences, a lot of people wanted to improve the extensibility model for the next major version of Eclipse Che. For Che 7, we came up with the following requirements:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;It should be easy to load plugins at runtime and it should not involve any extra compilation or installation steps. Therefore, plugins should be already compiled. The IDE only needs to load the code.&lt;/li&gt; &lt;/ol&gt; &lt;p id="bdyjACz"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png"&gt;&lt;img class=" aligncenter wp-image-555027 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png" alt="Requirement 1: Fast loading of Che workspace" width="527" height="109" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png 527w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4-300x62.png 300w" sizes="(max-width: 527px) 100vw, 527px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="2"&gt; &lt;li&gt;A poorly written plugin should not be able to break the whole IDE. If the user loads a plugin that has an error, the user should still be able to continue to use the current IDE.&lt;/li&gt; &lt;/ol&gt; &lt;p id="pFkMnHB"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png"&gt;&lt;img class=" aligncenter wp-image-555037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png" alt="Requirement 2: Secure loading" width="527" height="122" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png 527w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f-300x69.png 300w" sizes="(max-width: 527px) 100vw, 527px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="3"&gt; &lt;li&gt;In Eclipse Che, we wanted to guarantee that a plugin can&amp;#8217;t block the main functions of the IDE like opening a file or typing. The user should be able to identify whether a problem is caused by a plugin or is an issue with the core product itself.  If two plugins have a requirement for different/conflicting versions of a dependency, that should be allowed and shouldn&amp;#8217;t cause problems. Each plugin should get the specific version of the dependency it requires.&lt;/li&gt; &lt;/ol&gt; &lt;p id="bnjuKSW"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png"&gt;&lt;img class=" aligncenter wp-image-555047 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png" alt="Requirement 3: Code isolation" width="527" height="130" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png 527w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c-300x74.png 300w" sizes="(max-width: 527px) 100vw, 527px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Drawbacks of the Theia extension model&lt;/h2&gt; &lt;p&gt;Eclipse Theia was chosen as the alternative IDE for Che 7 and beyond.  Theia has an extension model, which we&amp;#8217;ll refer to as Theia extensions. The problem with the existing extension model was that it was mainly designed to develop custom IDEs. As a result, it has the similar drawbacks when developers try to customize their development workspace at runtime the way they can in VS Code:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;With Eclipse Theia extensions, when a new extension is added, the whole IDE is recompiled. If there are errors introduced by the extension, you may break the whole IDE. So after adding an extension, you could open a Che workspace and wind up with a blank page due to a compilation error instead of the IDE.&lt;/li&gt; &lt;/ol&gt; &lt;p id="yPQpbpR"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png"&gt;&lt;img class=" aligncenter wp-image-555057 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png" alt="Drawback 1: When a new extension is added, the whole IDE is recompiled" width="480" height="78" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403-300x49.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="2"&gt; &lt;li&gt;Extensions are retrieved from the &lt;code&gt;npmjs&lt;/code&gt; repository. While this can be nice because &lt;code&gt;npmjs&lt;/code&gt; has tons of libraries, when you install an extension it will download all dependencies again and again. If you’ve many dependencies, it may break. Additionally, you aren&amp;#8217;t able to add a local repository for private extensions.&lt;/li&gt; &lt;/ol&gt; &lt;p id="jOEUGfY"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png"&gt;&lt;img class=" aligncenter wp-image-555067 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png" alt="Drawback 2: Extensions are retrieved from the npmjs repository." width="480" height="62" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0-300x39.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="3"&gt; &lt;li id="VAKlfNg"&gt;Theia extensions allow extension writers to customize the whole IDE. However similar to the GWT-based IDE, any extension can easily break the whole IDE. Diagnosis can be difficult.&lt;/li&gt; &lt;/ol&gt; &lt;p id="XCQRDzD"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png"&gt;&lt;img class=" aligncenter wp-image-555077 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png" alt="Drawback 3: Any extension can easily break the whole IDE" width="480" height="134" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45-300x84.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;ol start="4"&gt; &lt;li&gt;The complexity of the extension model is too challenging for new developers. The Theia extension model has a lot of power that is great for advanced users; however, if you want to write your first extension, you need to master &lt;a href="http://inversify.io/"&gt;inverify&lt;/a&gt; and dependency injection. You also need to know which class is doing what and which interface you need to implement.&lt;/li&gt; &lt;/ol&gt; &lt;p id="DBYgJDc"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png"&gt;&lt;img class=" aligncenter wp-image-555107 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png" alt="Drawback 4: The extension model is too challenging for new developers" width="480" height="121" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a-300x76.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Clearly, Theia&amp;#8217;s extension model was not matching up with our requirements for extensibility.&lt;/p&gt; &lt;p id="WyILQtB"&gt;&lt;img class=" aligncenter wp-image-555087 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2.png 380w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2-300x300.png 300w" sizes="(max-width: 380px) 100vw, 380px" /&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Introducing Theia plugins&lt;/h2&gt; &lt;p&gt;At Red Hat, to meet our extensibility requirements we came up with the Theia Plugin Model.  The key aspects are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Plugins can be loaded at any time at the runtime without having to restart/refresh the IDE.&lt;/li&gt; &lt;/ol&gt; &lt;p id="FsYgqQs"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png"&gt;&lt;img class=" aligncenter wp-image-555117 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png" alt="Extensibility requirement 1: Plugins can be loaded at any time at the runtime" width="314" height="102" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png 314w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175-300x97.png 300w" sizes="(max-width: 314px) 100vw, 314px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;ol start="2"&gt; &lt;li&gt;Eclipse Theia plugins are self-contained and packaged into .theia files.  They contain all the runtime code for the plugins. There is no need to download anything else at startup.&lt;/li&gt; &lt;/ol&gt; &lt;p id="rszlOoE"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png"&gt;&lt;img class=" aligncenter wp-image-555127 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png" alt="Extensibility requirement 1: Theia plugins are self-contained" width="317" height="107" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png 317w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b-300x101.png 300w" sizes="(max-width: 317px) 100vw, 317px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;ol start="3"&gt; &lt;li&gt;Theia plugins have a simple API that is easy to learn.  You can use a dependency injection framework, but you don&amp;#8217;t have to. It&amp;#8217;s your choice. The model is as simple as importing only one namespace, &lt;code&gt;@theia/plugin&lt;/code&gt; (through the &lt;code&gt;npmjs&lt;/code&gt; package &lt;code&gt;@theia/plugin&lt;/code&gt;), and you can get what you need from this entry point with code completion on this object. You implement the lifecycle of your plugin by implementing the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; functions.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Sample code of a Theia plugin&lt;/h2&gt; &lt;pre&gt;import * as theia from '@theia/plugin'; export function start(context: theia.PluginContext) { const informationMessageTestCommand = { id: 'hello-world', label: "Hello World" }; context.subscriptions.push(theia.commands.registerCommand(informationMessageTestCommand, (...args: any[]) =&amp;#62; { theia.window.showInformationMessage('Hello World!'); })); } export function stop() { // commands automatically unregistered } &lt;/pre&gt; &lt;h2&gt;Theia plugin protocol&lt;/h2&gt; &lt;p id="ndcSQod"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png"&gt;&lt;img class=" aligncenter wp-image-555137 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png" alt="Theia plugin protocol " width="432" height="167" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png 432w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f-300x116.png 300w" sizes="(max-width: 432px) 100vw, 432px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Theia plugins use a protocol, which means you can run plugins anywhere! Some plugins can run in worker threads of the browser (they are called front-end plugins) or they can run on the server side in separate processes (back-end plugins). It’s easy to handle other kinds of namespace, including VS Code extensions.&lt;/p&gt; &lt;p&gt;Hear&amp;#8217;s an architecture diagram:&lt;/p&gt; &lt;p id="EjCfcdq"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png"&gt;&lt;img class=" aligncenter wp-image-555147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png" alt="Architecture diagram" width="972" height="538" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png 972w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5-768x425.png 768w" sizes="(max-width: 972px) 100vw, 972px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;The model is backward-compliant. The plugin model is provided through a TypeScript declaration file. The plugin code could be completely rewritten or Theia classes could be refactored; however, the model will remain unchanged.&lt;/p&gt; &lt;p id="IjasIDV"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png"&gt;&lt;img class=" aligncenter wp-image-555157 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png" alt="The model is backward-compliant" width="432" height="101" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png 432w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151-300x70.png 300w" sizes="(max-width: 432px) 100vw, 432px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The API is a high-level API designed so that plugins can&amp;#8217;t break the IDE. You might not be able to change everything you could think of in a plugin, but there are nearly unlimited possibilities to provide useful functionality for developers.&lt;/p&gt; &lt;h2&gt;Container-ready&lt;/h2&gt; &lt;p id="ZDcepfo"&gt;&lt;img class=" aligncenter wp-image-555167 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530.png 307w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530-300x300.png 300w" sizes="(max-width: 307px) 100vw, 307px" /&gt;&lt;/p&gt; &lt;p&gt;Eclipse Che is using &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;containers&lt;/a&gt; for developer tools. Theia plugins are written in TypeScript/Javascript and that works well. But sometimes, plugins writers need some dependencies that are not only pure &lt;code class="markup--code markup--p-code"&gt;npmjs&lt;/code&gt; dependencies. For example, if developers write a language server for Java, this plugin will probably require Java. So it might imply that the container that runs Eclipse Theia should have Java already installed on it.&lt;/p&gt; &lt;p&gt;This is why in Eclipse Che, it’s possible to run each Eclipse Theia plugin in its own container. This allows a plugin to use any system dependency it needs in its own container.&lt;/p&gt; &lt;p&gt;By default, all plugins are executed as a separate process in the Theia container:&lt;/p&gt; &lt;p id="TnZaqkh"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3.png"&gt;&lt;img class=" aligncenter wp-image-555197 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-1024x380.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3.png" alt="All plugins are executed as a separate process in the Theia container" width="1060" height="393" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3.png 1060w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-300x111.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-768x285.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-1024x380.png 1024w" sizes="(max-width: 1060px) 100vw, 1060px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;VS Code extensions&lt;/h2&gt; &lt;p&gt;The Eclipse Theia plugin protocol has been implemented in an extensible fashion and conforms to the VS Code API. This will allow some VS Code extensions to run inside of Theia. The API support will determine which extensions are compatible.&lt;/p&gt; &lt;p&gt;For example, it is currently possible to use the SonarLint VS Code extension from VS Code marketplace:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png"&gt;&lt;img class=" aligncenter wp-image-555207 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png" alt="SonarLint Extension on the VS Code Marketplace" width="868" height="276" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png 868w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095-300x95.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095-768x244.png 768w" sizes="(max-width: 868px) 100vw, 868px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;After loading the SonarLint VS Code extension at runtime, you can see the immediate results in a JavaScript source file:&lt;/p&gt; &lt;p id="sFBBrDH"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png"&gt;&lt;img class=" aligncenter wp-image-555217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png" alt="Results in a JavaScript source file" width="985" height="479" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png 985w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec-768x373.png 768w" sizes="(max-width: 985px) 100vw, 985px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here is the plugins view in Eclipse Theia after loading the VS Code extension:&lt;/p&gt; &lt;p id="todeNEs"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png"&gt;&lt;img class=" aligncenter wp-image-555227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png" alt="Plugins view in Eclipse Theia after loading the VS Code extension" width="304" height="190" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png 304w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a-300x188.png 300w" sizes="(max-width: 304px) 100vw, 304px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id="0dee" class="graf graf--h3 graf--leading"&gt;Try Eclipse Che 7 now!&lt;/h2&gt; &lt;p id="8481" class="graf graf--p graf-after--h3 selectionShareable"&gt;Want to try to the new version of Eclipse Che 7?  Here’s how:&lt;/p&gt; &lt;p id="ca45" class="graf graf--p graf-after--p selectionShareable"&gt;Click the following factory URL:&lt;br /&gt; &lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn" target="_blank" rel="nofollow noopener noopener noopener noopener" data-href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn"&gt;che.openshift.io/f?id=factoryvbwekkducozn3jsn&lt;/a&gt;&lt;/p&gt; &lt;p id="b4c8" class="graf graf--p graf-after--p selectionShareable"&gt;&lt;strong class="markup--strong markup--p-strong"&gt;Or, create your account&lt;/strong&gt; on &lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/" target="_blank" rel="noopener" data-href="https://che.openshift.io"&gt;che.openshift.io&lt;/a&gt;, &lt;strong class="markup--strong markup--p-strong"&gt;create a new workspace,&lt;/strong&gt; and select “Che 7” stack.&lt;/p&gt; &lt;p class="selectionShareable"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png" data-featherlight="image"&gt;&lt;img class="aligncenter wp-image-549977 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png" sizes="(max-width: 640px) 100vw, 640px" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-768x267.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png 1294w" alt="Try Eclipse Che 7 on OpenShift" width="640" height="223" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p class="selectionShareable"&gt;You can also test on your local machine, by installing the latest version of Eclipse Che. See &lt;em&gt;&lt;a class="markup--anchor markup--p-anchor" href="http://www.eclipse.org/che/docs/#getting-started" target="_blank" rel="noopener" data-href="http://www.eclipse.org/che/docs/#getting-started"&gt;Quick Start with Eclipse Che&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;h2 id="1953" class="graf graf--h3 graf--leading"&gt;Want to learn more?&lt;/h2&gt; &lt;p id="b78e" class="graf graf--p graf-after--h3 selectionShareable"&gt;See the &lt;em&gt;Eclipse Che 7 is coming and it&amp;#8217;s really hot&lt;/em&gt; article series:&lt;/p&gt; &lt;ul class="postList"&gt; &lt;li id="2127" class="graf graf--li graf-after--p"&gt;Part 1—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02"&gt;Eclipse Che 7 overview, and introducing the new IDE&lt;/a&gt;&lt;/li&gt; &lt;li id="07b2" class="graf graf--li graf-after--li"&gt;Part 2—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4"&gt;Introducing the plugin model&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3—&lt;a href="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/"&gt;Kube-native developer workspaces&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 4—&lt;a href="https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/"&gt;Functionality for Enterprise Development Teams and schedule&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;For information about Che running on &lt;a href="http://openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;, see &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady WorkSpaces for OpenShift&lt;/a&gt; (currently in beta) and Doug Tidwell’s article and videos, &lt;a href="https://developers.redhat.com/blog/2018/12/11/codeready-workspaces-openshift/"&gt;&lt;em&gt;CodeReady Workspaces for OpenShift (Beta)–It works on their machines too&lt;/em&gt;&lt;/a&gt;. Doug covers stacks and workspaces and factories to help you get started with Che.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#038;title=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" data-a2a-url="https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/" data-a2a-title="Extending Eclipse Che 7 to use VS Code extensions"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/"&gt;Extending Eclipse Che 7 to use VS Code extensions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TXZZwQRF5bo" height="1" width="1" alt=""/&gt;</content><summary>Recently the Eclipse Che community has been working to make Eclipse Theia the default web IDE for Eclipse Che 7. We’ve added a plugin model to Eclipse Theia that is compatible with Visual Studio Code (VS Code) extensions. Che 7 users will eventually be able to take advantage of extensions that have been written for VS Code in their cloud-based developer workspaces. It’s worth pointing out the popu...</summary><dc:creator>Florent Benoit</dc:creator><dc:date>2019-01-22T13:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/</feedburner:origLink></entry><entry><title>My 2cents on the future of Integration - With Service Mesh/Istio and Serverless/KNative</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rUjVQtZJ3bM/my-2cents-on-future-of-integration-with.html" /><category term="Agile Integration" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_christinalineng" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="service mesh" scheme="searchisko:content:tags" /><author><name>Christina Lin</name></author><id>searchisko:content:id:jbossorg_blog-my_2cents_on_the_future_of_integration_with_service_mesh_istio_and_serverless_knative</id><updated>2019-01-22T02:41:21Z</updated><published>2019-01-22T02:32:00Z</published><content type="html">&lt;br /&gt;It's been a year and half since I blogged about "Agile Integration architecture" (Gosh, time just flies). With the "microservices" and "cloud-native" hype, I was especially curious on how all these new concept and technology affect us on how to architect the integration systems. If you ever pay close attention to all the latest and greatest news from the Kubernetes community, I am sure you will hear a lot about the new "Service Mesh". And rumor has it that this is how integration can/should be done in cloud native world, but, is that so? Anyone who has ever worked on an integration project would tell you, it's a LOT more COMPLEX and can get worst overtime. I did a talk with Christian Posta in Red Hat Tech Exchange coming from a more comprehensive view of how different Red Hat technologies are applied under different patterns when building integration solutions. In fact he also did a great &lt;a href="http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/"&gt;blog&lt;/a&gt; about it.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://3.bp.blogspot.com/-RDXVzNMuwEA/XEaAbHkSXdI/AAAAAAAAFz4/5yMVmr5Umogr4KkCkKvw-DlcCupdpIRywCK4BGAYYCw/s1600/imageedit_10_3554669503.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="227" src="https://3.bp.blogspot.com/-RDXVzNMuwEA/XEaAbHkSXdI/AAAAAAAAFz4/5yMVmr5Umogr4KkCkKvw-DlcCupdpIRywCK4BGAYYCw/s400/imageedit_10_3554669503.png" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;Since then, another topics has been brought up numerous time, what about Serverless, how would it impact integration? Does it mean the death of services? &amp;nbsp;If we have all Microservices connected via Serviceless mechanism in service mesh, does that mean we go back to the old days of writing all the integration transformation logics in our application again? Obviously, this is complicated question to answer, and the new features keeps popping up, I am going to try to give my best to try and explain how I see everything fits into Agile Integration vision. Honestly, there is no exact right answer when it's about architecting system, it requires constant refactoring, my thought is to give a more general and flexible way of doing it that has less impact when change and being able to adapt change quickly. (That is what I call Agile Integration).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Service Mesh&amp;nbsp;&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;I remember last time, I started the agile integration reference architecture simply because the lack of organization of Microservices, and it still stand today. JUST because we have service mesh, doesn't mean it will magically solve the spaghetti connectivity if you are not being careful. To set the ground, what service mesh helps is to relief developer from dealing with repetitive, boring work in a distributed environment. Yes. Being cloud native with Microservices, means the system is more vulnerable to chain reaction disaster if not designed correctly, as you are working with small bots and gears in the system, that you never know how any small missed-handle can impact the entire system. Therefore we need to make each component more robust, failure proof and ideally damage recoverable. And Service Mesh helps you with getting the BASICs ready by adding a sidecar next to your running application. For every Microservices you create, no matter what they do, core business or content orchestration, they all need some kind of failure proof. Service Mesh gives you all that, from an application networking level. So that as a developer you will no longer have to wrap every single one of your Microservices with the circuit breaker, error retry and even handling version, deployment routing, and apply authorization, &amp;nbsp;those that has NOTHING to do with what the actually app is responsible for. These are often common rules that applies to the whole cluster. And service mesh is best for that, as these common policies are detached from actual application, can be managed centrally and apply individual on the sidecar so the microservice running your app is protected behind it.&lt;br /&gt;&lt;a href="http://2.bp.blogspot.com/-5O9JKK2ujcI/XEZ9_skvmHI/AAAAAAAAFzc/9DsEZcTa9JI1FqXar-Yt-WkpTOKKAp5UwCK4BGAYYCw/s1600/imageedit_6_9445908844.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" height="378" src="https://2.bp.blogspot.com/-5O9JKK2ujcI/XEZ9_skvmHI/AAAAAAAAFzc/9DsEZcTa9JI1FqXar-Yt-WkpTOKKAp5UwCK4BGAYYCw/s400/imageedit_6_9445908844.png" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;Another great feature with service mesh, is to ability to trace and observe the incoming request for the entire system. This will certainly help developer/operation have more insight into the complex spider web-like connectivity.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Dealing with REAL Life Integration&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;But when it comes to actually application implementation, some folks thinks we can now rely on Service Mesh to configure and connect. &lt;i&gt;MAYBE&lt;/i&gt;, if you are developing only a couple of small microservices, you can probably get away from that. BUT that is not what's happening in real life. For instance, formatting the data to the right granularity (Splitting/Aggregation), routing base on processing outcome of some content, a more complex orchestration of services call that requires precise rollback and business handling (Saga) , collection of events triggering, we can't possibly write all these into the Service Mesh config yml file (I am just being practical :p). So, I am sure now we have mutual agreement that integration logic still needs be written somewhere, DON'T tried to do it in your microservice with the business logic. That is why we need the conceptual layer in agile integration. They are the composite and core layer. Remember, &amp;nbsp;I mean CONCEPTUAL not physically on top of another, but separating the responsibility of the microservices so it's easier to locate, maintain and organize your applications. Taken from the lesson learnt from SOA. You will still need some kind of integration patterns to compose service that has the right granularity for the receiving end. &lt;br /&gt;&lt;br /&gt;Monitoring and tracing is crucial in ANY integration system, and let's face it, there are NOT JUST http calls. Majority of times, they are events, and honestly an event driven reactive system is 100 times more flexible and modularize than sticking a bunch of API together. To be able to collect these data are needed beyond simple request tracing. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Serverless&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;a href="http://2.bp.blogspot.com/-msZJiT5Io64/XEZ_AlP75dI/AAAAAAAAFzs/qxMRGse0dokB4XntguAJZcmMt9CHDhZwgCK4BGAYYCw/s1600/imageedit_8_5274947810.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="https://2.bp.blogspot.com/-msZJiT5Io64/XEZ_AlP75dI/AAAAAAAAFzs/qxMRGse0dokB4XntguAJZcmMt9CHDhZwgCK4BGAYYCw/s640/imageedit_8_5274947810.png" width="456" /&gt;&lt;/a&gt;I had to talk about this, the whole serverless development, deployment and runtime concept can take agile integration in another level not just conceptually but physically too. The idea of quickly spin up integration piece of logic, the ability to scale freely up and down. That is what I call true agility. I was thrilled to see Nicola demonstrate&lt;a href="https://www.nicolaferraro.me/2018/12/10/camel-k-on-knative/"&gt; Camel-K on KNative&lt;/a&gt;. &amp;nbsp;Camel just opens up a wide range of connect possibility for the serverless call. To me the core spirits of server less is (For now)&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Being able to quickly produce/start application without complex configuration and heavy runtime.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Elastic resource allocation responding to loads.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;And what integration helps to bring to the table is the ability to allow the system to responds more events from boarder range of endpoints, for instance, IoT, SOAP and messaging and other protocol that are not simple http calls.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This is just a HIGH level overview of how I see Integration are shaped in the future of a serverless cloud native world. Of course I have not touch upon many topics like APIs, Event driven architecture, self service ability. They deserve separate blogs. Might do another later this week. Again, these are just my 2cents coming out from a more practical real life point of view.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hFXzh/~4/vkpk8RmfbD8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rUjVQtZJ3bM" height="1" width="1" alt=""/&gt;</content><summary>It's been a year and half since I blogged about "Agile Integration architecture" (Gosh, time just flies). With the "microservices" and "cloud-native" hype, I was especially curious on how all these new concept and technology affect us on how to architect the integration systems. If you ever pay close attention to all the latest and greatest news from the Kubernetes community, I am sure you will he...</summary><dc:creator>Christina Lin</dc:creator><dc:date>2019-01-22T02:32:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/blogspot/hFXzh/~3/vkpk8RmfbD8/my-2cents-on-future-of-integration-with.html</feedburner:origLink></entry><entry><title>Hibernate ORM 5.4.1.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4dylmMet1Ec/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_orm_5_4_1_final_released</id><updated>2019-01-23T15:18:41Z</updated><published>2019-01-22T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just released the first maintenance release of Hibernate ORM 5.4.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It is designed to be a drop in replacement for ORM 5.4.0.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="bugfixes-and-documentation-improvements"&gt;&lt;a class="anchor" href="#bugfixes-and-documentation-improvements"&gt;&lt;/a&gt;Bugfixes and documentation improvements&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We fixed several regressions and improved the documentation. Some regressions are specific to 5.4 but some others are also affecting older versions.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find the full list of changes in this version &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31726/tab/release-report-all-issues"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31726&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-5-4-1-final"&gt;&lt;a class="anchor" href="#getting-5-4-1-final"&gt;&lt;/a&gt;Getting 5.4.1.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on &lt;a href="http://hibernate.org/orm/releases/5.4/#get-it"&gt;the dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We will release regular maintenance releases thereafter but the main focus of development is now Hibernate ORM 6.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/hibernate"&gt;&lt;strong&gt;hibernate&lt;/strong&gt; tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-orm"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4dylmMet1Ec" height="1" width="1" alt=""/&gt;</content><summary>We just released the first maintenance release of Hibernate ORM 5.4. It is designed to be a drop in replacement for ORM 5.4.0. What’s new Bugfixes and documentation improvements We fixed several regressions and improved the documentation. Some regressions are specific to 5.4 but some others are also affecting older versions. You can find the full list of changes in this version here (or, for peopl...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2019-01-22T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/01/22/hibernate-orm-541-final-out/</feedburner:origLink></entry><entry><title>Serverless and Knative: Installation through Deployment</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XO9g8bCwLlY/" /><category term="Developer Events" scheme="searchisko:content:tags" /><category term="devnation" scheme="searchisko:content:tags" /><category term="DevNation Live" scheme="searchisko:content:tags" /><category term="FaaS" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Functions-as-a-Service" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>David David</name></author><id>searchisko:content:id:jbossorg_blog-serverless_and_knative_installation_through_deployment</id><updated>2019-01-21T19:57:30Z</updated><published>2019-01-21T19:57:30Z</published><content type="html">&lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/-8fW1x5biCw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;Serverless&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/knative/"&gt;Knative&lt;/a&gt; and FaaS will change your workflow as much as any change to design patterns in your career.&lt;/p&gt; &lt;p&gt;In this video, Red Hat&amp;#8217;s &lt;a href="https://twitter.com/kamesh_sampath"&gt;Kamesh Sampath&lt;/a&gt; will deep dive all about Knative.&lt;/p&gt; &lt;p&gt;Reusable components that focus on solving many mundane but difficult tasks like orchestrating source-to-container workflows, routing and managing traffic during deployment, autoscaling your workloads, or binding running services to eventing ecosystems free developers to work on more interesting coding.&lt;/p&gt; &lt;p&gt;In this webinar, we’ll install Knative and its components and take an in-depth look into:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The building blocks of Knative—such as serving, building and eventing ecosystems.&lt;/li&gt; &lt;li&gt;Demystify the deployment model that allows you to deploy your cloud-native services on Kubernetes and easily turn serve them as serverless services.&lt;/li&gt; &lt;li&gt;Various deployment strategies, such as latest and pinned, and how to use Knative build to convert a source-to-URL (serverless service).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#038;title=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" data-a2a-url="https://developers.redhat.com/blog/2019/01/21/serverless-and-knative-installation-through-deployment/" data-a2a-title="Serverless and Knative: Installation through Deployment"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/21/serverless-and-knative-installation-through-deployment/"&gt;Serverless and Knative: Installation through Deployment&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XO9g8bCwLlY" height="1" width="1" alt=""/&gt;</content><summary>Serverless, Knative and FaaS will change your workflow as much as any change to design patterns in your career. In this video, Red Hat’s Kamesh Sampath will deep dive all about Knative. Reusable components that focus on solving many mundane but difficult tasks like orchestrating source-to-container workflows, routing and managing traffic during deployment, autoscaling your workloads, or binding ru...</summary><dc:creator>David David</dc:creator><dc:date>2019-01-21T19:57:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/21/serverless-and-knative-installation-through-deployment/</feedburner:origLink></entry></feed>
